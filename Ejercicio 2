public class RecursionExercises {

    // 1. Suma de 0 a n
    public static int sumaN(int n) {
        if (n == 0) return 0;
        return n + sumaN(n - 1);
    }

    // 2. Factorial de un número
    public static int factorial(int n) {
        if (n == 0 || n == 1) return 1;
        return n * factorial(n - 1);
    }

    // 3. Potencia n-ésima de un número
    public static int potencia(int base, int exp) {
        if (exp == 0) return 1;
        return base * potencia(base, exp - 1);
    }

    // 4. Suma de los elementos de una lista
    public static int sumaLista(int[] lista, int index) {
        if (index == lista.length) return 0;
        return lista[index] + sumaLista(lista, index + 1);
    }

    // 5. Media aritmética de una lista
    public static double mediaAritmetica(int[] lista) {
        if (lista.length == 0) return 0;
        return (double) sumaLista(lista, 0) / lista.length;
    }

    // 6. Desviación típica de una lista
    public static double desviacionTipica(int[] lista, double media, int index) {
        if (index == lista.length) return 0;
        double diferencia = lista[index] - media;
        return Math.sqrt((diferencia * diferencia + desviacionTipica(lista, media, index + 1)) / lista.length);
    }

    // 7. Suma de los primeros números pares hasta n
    public static int sumaPares(int n) {
        if (n < 2) return 0;
        if (n % 2 != 0) n--;
        return n + sumaPares(n - 2);
    }

    // 8. Suma de los elementos pares de una lista
    public static int sumaParesLista(int[] lista, int index) {
        if (index == lista.length) return 0;
        int valor = (lista[index] % 2 == 0) ? lista[index] : 0;
        return valor + sumaParesLista(lista, index + 1);
    }

    // 9. Lista de números pares de una lista
    public static java.util.List<Integer> obtenerListaPar(int[] lista, int index) {
        java.util.List<Integer> resultado = new java.util.ArrayList<>();
        if (index == lista.length) return resultado;
        if (lista[index] % 2 == 0) resultado.add(lista[index]);
        resultado.addAll(obtenerListaPar(lista, index + 1));
        return resultado;
    }

    // 10. Lista de los primeros números pares hasta n
    public static java.util.List<Integer> listaPar(int n) {
        java.util.List<Integer> resultado = new java.util.ArrayList<>();
        if (n < 2) return resultado;
        if (n % 2 != 0) n--;
        resultado.add(n);
        resultado.addAll(listaPar(n - 2));
        return resultado;
    }

    // 11. Producto escalar de dos listas
    public static int productoEscalar(int[] lista1, int[] lista2, int index) {
        if (index == lista1.length) return 0;
        return lista1[index] * lista2[index] + productoEscalar(lista1, lista2, index + 1);
    }

    public static void main(String[] args) {
        // Ejemplos de ejecución
        System.out.println("Suma de 0 a 5: " + sumaN(5));
        System.out.println("Factorial de 5: " + factorial(5));
        System.out.println("2^3: " + potencia(2, 3));
        int[] lista = {1, 2, 3, 4};
        System.out.println("Suma de la lista: " + sumaLista(lista, 0));
        System.out.println("Media aritmética: " + mediaAritmetica(lista));
        System.out.println("Desviación típica: " + desviacionTipica(lista, mediaAritmetica(lista), 0));
        System.out.println("Suma de pares hasta 9: " + sumaPares(9));
        System.out.println("Suma de pares en la lista: " + sumaParesLista(lista, 0));
        System.out.println("Lista de pares: " + obtenerListaPar(lista, 0));
        System.out.println("Lista de pares hasta 9: " + listaPar(9));
        int[] lista2 = {2, 4, 6};
        System.out.println("Producto escalar: " + productoEscalar(lista, lista2, 0));
    }
}
