import java.time.LocalDate;
import java.util.List;
import java.util.Random;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class RecursionFunctional {

    // 12. Explicación de expresión lambda
    /*
       Una expresión lambda en Java es una función anónima que permite escribir código más conciso.
       Se usa principalmente con interfaces funcionales, es decir, interfaces que tienen un único método abstracto.
       Ejemplo: (x) -> x * 2
    */

    // 13. Integral de una función usando lambda
    public static double integral(double a, double b, double h, Function<Double, Double> funcion) {
        return IntStream.range(0, (int) ((b - a) / h))
                .mapToDouble(i -> funcion.apply(a + i * h) * h)
                .sum();
    }

    // 14. Generación de Streams
    public static void generarStreams() {
        // 1. Stream de números con of
        IntStream.of(1, 2, 3, 4, 5).forEach(System.out::println);

        // 2. Stream de números con range
        IntStream.range(1, 6).forEach(System.out::println);

        // 3. Stream de números con iterate
        IntStream.iterate(0, n -> n + 2).limit(5).forEach(System.out::println);

        // 4. Stream de números aleatorios
        new Random().doubles(5).forEach(System.out::println);
    }

    // 17. Clase Persona y Personas
    static class Persona {
        String nombre;
        LocalDate fechaDeNacimiento;

        public Persona(String nombre, LocalDate fechaDeNacimiento) {
            this.nombre = nombre;
            this.fechaDeNacimiento = fechaDeNacimiento;
        }

        public int calcularEdad() {
            return LocalDate.now().getYear() - fechaDeNacimiento.getYear();
        }
    }

    static class Personas {
        List<Persona> lista;

        public void annadirPersona(Persona persona) {
            lista.add(persona);
        }

        public Persona elMasJoven() {
            return lista.stream().min((p1, p2) -> Integer.compare(p2.calcularEdad(), p1.calcularEdad())).orElse(null);
        }

        public long calcularSumaEdades() {
            return lista.stream().mapToLong(Persona::calcularEdad).sum();
        }

        public long calcularEdadMinima() {
            return lista.stream().mapToLong(Persona::calcularEdad).min().orElse(0);
        }

        public double calcularMediaDeEdad() {
            return lista.stream().mapToLong(Persona::calcularEdad).average().orElse(0);
        }
    }

    public static void main(String[] args) {
        System.out.println("Integral de x^2 entre 0 y 1: " + integral(0, 1, 0.01, x -> x * x));
        generarStreams();
    }
}

